import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                          ReplyKeyboardRemove, InlineKeyboardMarkup, 
                          InlineKeyboardButton)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
storage = MemoryStorage()
bot = Bot(token=os.getenv("BOT_TOKEN"))  # –¢–æ–∫–µ–Ω –∑ Render
ADMIN_ID = os.getenv("ADMIN_ID")         # –í–∞—à Telegram ID
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Google Sheets
try:
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    creds_json = json.loads(os.getenv("GOOGLE_CREDS_JSON"))
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sheet = client.open(os.getenv("SHEET_NAME", "KYC –ó–∞—è–≤–∫–∏")).sheet1
except Exception as e:
    print(f"üö® –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    if ADMIN_ID:
        error_msg = "üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets. –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏!"
        async def notify_admin(error_msg: str):
    try:
        await bot.send_message(ADMIN_ID, error_msg)
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É: {e}")

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('‚ÑπÔ∏è –Ü–Ω—Ñ–æ'))
main_menu.add(KeyboardButton('üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É'))
main_menu.add(KeyboardButton('‚ùì FAQ'))

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text = """
    –ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –ø—Ä–æ—î–∫—Ç—É KYC Team ‚Äî –ø—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (KYC) –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±—ñ—Ä–∂–∞—Ö üíº

üîí –ë–µ–∑–ø–µ—á–Ω–æ  
üí∏ –í—ñ–¥ 100 –¥–æ 400 –≥—Ä–Ω –∑–∞ –∑–∞—è–≤–∫—É  
üïê 10‚Äì20 —Ö–≤–∏–ª–∏–Ω  
üì± –ü–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ü–∞—Å–ø–æ—Ä—Ç/ID + —Å–µ–ª—Ñ—ñ

‚¨áÔ∏è –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ.
    """
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_menu)

# –°—Ç–∞–Ω–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
class ApplicationStates(StatesGroup):
    name = State()
    age = State()
    city = State()
    experience = State()
    phone = State()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É"
@dp.message_handler(text='üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É')
async def start_application(message: types.Message):
    await message.answer("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –æ–¥–Ω–æ–º—É. –ü–æ—á–Ω–µ–º–æ!\n\n1. –í–∞—à–µ –Ü–º'—è —Ç–∞ –Ω—ñ–∫ –≤ Telegram?", reply_markup=ReplyKeyboardRemove())
    await ApplicationStates.name.set()

# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞—è–≤–∫—É
@dp.message_handler(state=ApplicationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("2. –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await message.answer("3. –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer("4. –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–∞—î—Ç–µ (–ø–∞—Å–ø–æ—Ä—Ç, ID, –≤–æ–¥—ñ–π—Å—å–∫–µ —Ç–æ—â–æ)?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['experience'] = message.text
    await message.answer("5. –ß–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ —Ç–∞–∫ —Ç–æ –¥–µ?)")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user = message.from_user
        
        # –ó–∞–ø–∏—Å —É Google –¢–∞–±–ª–∏—Ü—é
        try:
            row = [
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                data['name'],
                data['age'],
                data['city'],
                data['experience'],
                data['phone'],
                str(user.id),
                f"@{user.username}" if user.username else "–Ω–µ–º–∞—î",
                f"{user.first_name or ''} {user.last_name or ''}".strip()
            ]
            sheet.append_row(row)
        except Exception as e:
            print(f"üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google Sheets: {e}")
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞—è–≤–∫–∏: {e}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        admin_msg = f"""
üìÑ *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!*
üïí {datetime.now().strftime("%d.%m.%Y %H:%M")}

üë§ *–Ü–º'—è:* {data['name']}
üî¢ *–í—ñ–∫:* {data['age']}
üèôÔ∏è *–ú—ñ—Å—Ç–æ:* {data['city']}
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç–∏:* {data['experience']}
üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* {data['phone']}

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:*
ID: {user.id}
Username: {'@' + user.username if user.username else '–Ω–µ–º–∞—î'}
–Ü–º'—è: {user.first_name or ''} {user.last_name or ''}
        """
        
        await bot.send_message(
            ADMIN_ID,
            admin_msg,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    "–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É",
                    url=f"tg://user?id={user.id}"
                )
            )
        )
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(
            "‚úÖ –î—è–∫—É—î–º–æ, –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
            "üîó –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:\n"
            "üëâ https://t.me/destorkycteam"
            "‚ùó –ü–æ –±—É–¥—å —è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –æ–ø–∏—Å—ñ –≥—Ä—É–ø–∏.",
            parse_mode="Markdown",
            reply_markup=main_menu
        )
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

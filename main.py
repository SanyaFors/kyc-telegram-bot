import os
import json
from datetime import datetime
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                          ReplyKeyboardRemove, InlineKeyboardMarkup, 
                          InlineKeyboardButton)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio

# Flask
app = Flask(__name__)

# Telegram bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

# Google Sheets
try:
    creds_json = json.loads(os.getenv("GOOGLE_CREDS_JSON"))
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sheet = client.open(os.getenv("SHEET_NAME", "KYC –ó–∞—è–≤–∫–∏")).sheet1
except Exception as e:
    print(f"\u26a0\ufe0f Google Sheets –ø–æ–º–∏–ª–∫–∞: {e}")
    if ADMIN_ID:
        asyncio.get_event_loop().create_task(bot.send_message(ADMIN_ID, f"\u274c –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}"))

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('\u2139\ufe0f –Ü–Ω—Ñ–æ'))
main_menu.add(KeyboardButton('üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É'))
main_menu.add(KeyboardButton('‚ùì FAQ'))

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class ApplicationStates(StatesGroup):
    name = State()
    age = State()
    city = State()
    experience = State()
    phone = State()

# –ö–æ–º–∞–Ω–¥–∏
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    text = """
–ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –ø—Ä–æ—î–∫—Ç—É KYC Team ‚Äî –ø—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (KYC) –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±—ñ—Ä–∂–∞—Ö üíº

üîí –ë–µ–∑–ø–µ—á–Ω–æ  
üí∏ –í—ñ–¥ 100 –¥–æ 400 –≥—Ä–Ω –∑–∞ –∑–∞—è–≤–∫—É  
üïê 10‚Äì20 —Ö–≤–∏–ª–∏–Ω  
üì± –ü–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ü–∞—Å–ø–æ—Ä—Ç/ID + —Å–µ–ª—Ñ—ñ

‚¨áÔ∏è –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ.
"""
    await message.answer(text, reply_markup=main_menu)

@dp.message_handler(text='‚Ñπ\ufe0f –Ü–Ω—Ñ–æ')
async def send_info(message: types.Message):
    await message.answer(
        """
üîπ –•—Ç–æ –º–∏?  
–ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –ª—é–¥—è–º –∑–∞—Ä–æ–±–∏—Ç–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π (KYC) –¥–ª—è –∫—Ä–∏–ø—Ç–æ–±—ñ—Ä–∂.

üîπ –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?  
1. –¢–∏ –∑–∞—Ö–æ–¥–∏—à –≤ –∞–∫–∞—É–Ω—Ç –ø–æ –Ω–∞—à–∏–º –¥–∞–Ω–∏–º –∞–±–æ –∂ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–∞—î–º–æ)  
2. –ü—Ä–æ—Ö–æ–¥–∏—à –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é  
3. –û—Ç—Ä–∏–º—É—î—à –æ–ø–ª–∞—Ç—É –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

üîπ –ó–∞–∫–æ–Ω–Ω–æ?  
–¢–∞–∫. –¶–µ –Ω–µ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ, –Ω–µ –±–∞–Ω–∫–∏, –Ω–µ –∫—Ä–µ–¥–∏—Ç–∏.

üîπ –°–∫—ñ–ª—å–∫–∏ –ø–ª–∞—Ç–∏–º–æ?  
100‚Äì400 –≥—Ä–Ω –∑–∞ –∑–∞—è–≤–∫—É (–∑–∞—è–≤–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ –±–∞–≥–∞—Ç–æ). –í–∏–ø–ª–∞—Ç–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
""",
        parse_mode="Markdown")

@dp.message_handler(text='‚ùì FAQ')
async def send_faq(message: types.Message):
    await message.answer("""
‚ùì *–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:*
    
1. *–Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?*
   - –ü–∞—Å–ø–æ—Ä—Ç –∞–±–æ ID-–∫–∞—Ä—Ç–∞, –≤–æ–¥—ñ–π—Å—å–∫–µ, –∑–∞–≥—Ä–∞–Ω
   - –°–µ–ª—Ñ—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º

2. *–Ø–∫ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞?*
   - –ù–∞ –∫–∞—Ä—Ç—É –∞–±–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

3. *–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–π–º–∞—î?*
   - –í—ñ–¥ 10 –¥–æ 20 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –æ–¥–Ω—É –∑–∞—è–≤–∫—É

4. *–ß–∏ —Ü–µ –±–µ–∑–ø–µ—á–Ω–æ?*
   - –¢–∞–∫, –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º–∏ –±—ñ—Ä–∂–∞–º–∏
""", parse_mode="Markdown")

@dp.message_handler(text='üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É')
async def start_application(message: types.Message):
    await message.answer("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –æ–¥–Ω–æ–º—É. –ü–æ—á–Ω–µ–º–æ!\n\n1. –í–∞—à–µ –Ü–º'—è —Ç–∞ –Ω—ñ–∫ –≤ Telegram?", reply_markup=ReplyKeyboardRemove())
    await ApplicationStates.name.set()

@dp.message_handler(state=ApplicationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("2. –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await message.answer("3. –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer("4. –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–∞—î—Ç–µ (–ø–∞—Å–ø–æ—Ä—Ç, ID, –≤–æ–¥—ñ–π—Å—å–∫–µ —Ç–æ—â–æ)?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.experience)
async def process_exp(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['experience'] = message.text
    await message.answer("5. –ß–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ —Ç–∞–∫ —Ç–æ –¥–µ?)")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user = message.from_user
        try:
            row = [
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                data['name'], data['age'], data['city'],
                data['experience'], data['phone'],
                str(user.id),
                f"@{user.username}" if user.username else "–Ω–µ–º–∞—î",
                f"{user.first_name or ''} {user.last_name or ''}".strip()
            ]
            sheet.append_row(row)

            await bot.send_message(
                ADMIN_ID,
                f"\ud83d\uddcb –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n–Ü–º'—è: {data['name']}\n–í—ñ–∫: {data['age']}\n–ú—ñ—Å—Ç–æ: {data['city']}\n–î–æ–∫—É–º–µ–Ω—Ç–∏: {data['experience']}\n–ö–æ–Ω—Ç–∞–∫—Ç: {data['phone']}",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={user.id}")
                ),
                parse_mode="Markdown"
            )

            await message.answer(
                "‚úÖ –î—è–∫—É—î–º–æ, –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
                "üîó –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:\n"
                "üëâ https://t.me/+06666cc2_TwwMDZi\n"
                "‚ùó –ü–æ –±—É–¥—å —è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –æ–ø–∏—Å—ñ –≥—Ä—É–ø–∏.",
                reply_markup=main_menu
            )
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É: {e}")
            await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu)
    await state.finish()

# Webhook endpoint
@app.route('/webhook', methods=['POST'])
async def webhook():
    update = types.Update(**request.json)
    await dp.process_update(update)
    return "ok", 200

# Health check
@app.route('/')
def health():
    return "‚úÖ Bot is alive!", 200

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup())
    app.run(host='0.0.0.0', port=10000)

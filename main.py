@dp.message_handler(state=ApplicationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("2. –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await message.answer("3. –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer("4. –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–∞—î—Ç–µ (–ø–∞—Å–ø–æ—Ä—Ç, ID, –≤–æ–¥—ñ–π—Å—å–∫–µ —Ç–æ—â–æ)?")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['experience'] = message.text
    await message.answer("5. –ß–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ —Ç–∞–∫ —Ç–æ –¥–µ?)")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user = message.from_user
        
        try:
            # –ó–∞–ø–∏—Å —É Google –¢–∞–±–ª–∏—Ü—é
            row = [
                datetime.now().strftime("%Y-%m-%d %H:%M"),
                data['name'],
                data['age'],
                data['city'],
                data['experience'],
                data['phone'],
                str(user.id),
                f"@{user.username}" if user.username else "–Ω–µ–º–∞—î",
                f"{user.first_name or ''} {user.last_name or ''}".strip()
            ]
            sheet.append_row(row)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
            admin_msg = f"""
üìÑ *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!*
üïí {datetime.now().strftime("%d.%m.%Y %H:%M")}

üë§ *–Ü–º'—è:* {data['name']}
üî¢ *–í—ñ–∫:* {data['age']}
üèôÔ∏è *–ú—ñ—Å—Ç–æ:* {data['city']}
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç–∏:* {data['experience']}
üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* {data['phone']}

üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:*
ID: {user.id}
Username: {'@' + user.username if user.username else '–Ω–µ–º–∞—î'}
–Ü–º'—è: {user.first_name or ''} {user.last_name or ''}
            """
            
            await bot.send_message(
                ADMIN_ID,
                admin_msg,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(
                        "–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É",
                        url=f"tg://user?id={user.id}"
                    )
                )
            )
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await message.answer(
                "‚úÖ –î—è–∫—É—î–º–æ, –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
                "üîó –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:\n"
                "üëâ https://t.me/+06666cc2_TwwMDZi\n"
                "‚ùó –ü–æ –±—É–¥—å —è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –æ–ø–∏—Å—ñ –≥—Ä—É–ø–∏.",
                parse_mode="Markdown",
                reply_markup=main_menu
            )
            
        except Exception as e:
            print(f"üö® –ü–æ–º–∏–ª–∫–∞: {e}")
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞—è–≤–∫–∏: {e}")
            await message.answer(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=main_menu
            )
    
    await state.finish()

if name == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=10000, debug=False, use_reloader=False)
    ).start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

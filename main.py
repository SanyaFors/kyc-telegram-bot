import os
import json
from datetime import datetime
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           ReplyKeyboardRemove, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.utils.markdown import escape_md
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import logging

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask ---
app = Flask(__name__)

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
SHEET_NAME = os.getenv("SHEET_NAME", "KYC –ó–∞—è–≤–∫–∏")

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Aiogram ---
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=storage)

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets ---
sheet = None
try:
    creds_json_str = os.getenv("GOOGLE_CREDS_JSON")
    if not creds_json_str:
        logging.warning("‚ö†Ô∏è  –ó–º—ñ–Ω–Ω–∞ GOOGLE_CREDS_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –†–æ–±–æ—Ç–∞ –∑ Google Sheets –±—É–¥–µ –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
    else:
        creds_json = json.loads(creds_json_str)
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
        client = gspread.authorize(creds)
        sheet = client.open(SHEET_NAME).sheet1
        logging.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Google Sheets.")
except Exception as e:
    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
    if ADMIN_ID:
        asyncio.run(bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}", parse_mode=None))

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('‚ÑπÔ∏è –Ü–Ω—Ñ–æ'))
main_menu.add(KeyboardButton('üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É'))
main_menu.add(KeyboardButton('‚ùì FAQ'))

# --- –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤ (FSM) –¥–ª—è –∞–Ω–∫–µ—Ç–∏ ---
class ApplicationStates(StatesGroup):
    name = State()
    age = State()
    city = State()
    documents = State()
    experience = State()
    phone = State()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---

@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message, state: FSMContext):
    await state.finish()
    text = """
–ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –ø—Ä–æ—î–∫—Ç—É KYC Team ‚Äî –ø—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (KYC) –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±—ñ—Ä–∂–∞—Ö üíº

üîí –ë–µ–∑–ø–µ—á–Ω–æ  
üí∏ –í—ñ–¥ 100 –¥–æ 400 –≥—Ä–Ω –∑–∞ –∑–∞—è–≤–∫—É  
üïê 10‚Äì20 —Ö–≤–∏–ª–∏–Ω  
üì± –ü–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ –ü–∞—Å–ø–æ—Ä—Ç/ID + —Å–µ–ª—Ñ—ñ

‚¨áÔ∏è –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∏–∂—á–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ.
"""
    await message.answer(text, reply_markup=main_menu, parse_mode=None)

@dp.message_handler(text='‚ÑπÔ∏è –Ü–Ω—Ñ–æ', state='*')
async def send_info(message: types.Message):
    await message.answer("""
üîπ *–•—Ç–æ –º–∏?* –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –ª—é–¥—è–º –∑–∞—Ä–æ–±–∏—Ç–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ–π (KYC) –¥–ª—è –∫—Ä–∏–ø—Ç–æ–±—ñ—Ä–∂.

üîπ *–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?* 1. –¢–∏ –∑–∞—Ö–æ–¥–∏—à –≤ –∞–∫–∞—É–Ω—Ç –ø–æ –Ω–∞—à–∏–º –¥–∞–Ω–∏–º –∞–±–æ –∂ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–∞—î–º–æ)  
2. –ü—Ä–æ—Ö–æ–¥–∏—à –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é  
3. –û—Ç—Ä–∏–º—É—î—à –æ–ø–ª–∞—Ç—É –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

üîπ *–ó–∞–∫–æ–Ω–Ω–æ?* –¢–∞–∫. –¶–µ –Ω–µ —à–∞—Ö—Ä–∞–π—Å—Ç–≤–æ, –Ω–µ –±–∞–Ω–∫–∏, –Ω–µ –∫—Ä–µ–¥–∏—Ç–∏.

üîπ *–°–∫—ñ–ª—å–∫–∏ –ø–ª–∞—Ç–∏–º–æ?* 100‚Äì400 –≥—Ä–Ω –∑–∞ –∑–∞—è–≤–∫—É (–∑–∞—è–≤–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ –±–∞–≥–∞—Ç–æ). –í–∏–ø–ª–∞—Ç–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
""")

@dp.message_handler(text='‚ùì FAQ', state='*')
async def send_faq(message: types.Message):
    await message.answer("""
‚ùì *–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:*
    
1. *–Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ?*
   - –ü–∞—Å–ø–æ—Ä—Ç –∞–±–æ ID-–∫–∞—Ä—Ç–∞, –≤–æ–¥—ñ–π—Å—å–∫–µ, –∑–∞–≥—Ä–∞–Ω
   - –°–µ–ª—Ñ—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º

2. *–Ø–∫ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞?*
   - –ù–∞ –∫–∞—Ä—Ç—É –∞–±–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

3. *–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–π–º–∞—î?*
   - –í—ñ–¥ 10 –¥–æ 20 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –æ–¥–Ω—É –∑–∞—è–≤–∫—É

4. *–ß–∏ —Ü–µ –±–µ–∑–ø–µ—á–Ω–æ?*
   - –¢–∞–∫, –º–∏ –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º–∏ –±—ñ—Ä–∂–∞–º–∏
""")

@dp.message_handler(text='üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞—è–≤–∫—É', state='*')
async def start_application(message: types.Message):
    await message.answer("*1. –í–∞—à–µ –Ü–º'—è —Ç–∞ –Ω—ñ–∫ –≤ Telegram?*", reply_markup=ReplyKeyboardRemove())
    await ApplicationStates.name.set()

# --- –õ–∞–Ω—Ü—é–∂–æ–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç–∏ ---

@dp.message_handler(state=ApplicationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("*2. –°–∫—ñ–ª—å–∫–∏ –≤–∞–º –ø–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤?*")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —á–∏—Å–ª–æ–º.")
        return
    async with state.proxy() as data:
        data['age'] = message.text
    await message.answer("*3. –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?*")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.city)
async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer("*4. –Ø–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –º–∞—î—Ç–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ü–∞—Å–ø–æ—Ä—Ç, ID-–∫–∞—Ä—Ç–∞, –≤–æ–¥—ñ–π—Å—å–∫–µ)?*")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.documents)
async def process_documents(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['documents'] = message.text
    await message.answer("*5. –ß–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ —Ç–∞–∫, —Ç–æ –¥–µ —Å–∞–º–µ)?*")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['experience'] = message.text
    await message.answer("*6. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É?*")
    await ApplicationStates.next()

@dp.message_handler(state=ApplicationStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user = message.from_user

        # --- –ì–û–õ–û–í–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–º —Å–ø–æ—Å–æ–±–æ–º ---
        # –ü–æ–º—ñ—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–ª–æ–∫ –∫–æ–¥—É (```), –¥–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î.
        user_data_block = (
            f"–Ü–º'—è:       {data['name']}\n"
            f"–í—ñ–∫:        {data['age']}\n"
            f"–ú—ñ—Å—Ç–æ:      {data['city']}\n"
            f"–î–æ–∫—É–º–µ–Ω—Ç–∏:  {data['documents']}\n"
            f"–î–æ—Å–≤—ñ–¥:     {data['experience']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç:    {data['phone']}"
        )

        admin_message = (
            f"üì® *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{escape_md(user.username or 'N/A')}*\n\n"
            f"```{user_data_block}```"
        )
        
        sheet_row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data['name'], data['age'], data['city'],
            data['documents'], data['experience'], data['phone'],
            str(user.id),
            f"@{user.username}" if user.username else "–Ω–µ–º–∞—î",
            f"{user.first_name or ''} {user.last_name or ''}".strip()
        ]

    try:
        if sheet:
            sheet.append_row(sheet_row)
            logging.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –≤ Google Sheets –≤—ñ–¥ {user.id}")

        if ADMIN_ID:
            await bot.send_message(
                ADMIN_ID,
                admin_message,
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", url=f"tg://user?id={user.id}")
                )
            )

        await message.answer(
                "‚úÖ –î—è–∫—É—î–º–æ, –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ!\n"
                "üîó –î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó –≥—Ä—É–ø–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:\n"
                "üëâ https://t.me/+06666cc2_TwwMDZi\n"
                "‚ùó –ü–æ –±—É–¥—å —è–∫–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –æ–ø–∏—Å—ñ –≥—Ä—É–ø–∏.",
            reply_markup=main_menu
        )

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞—è–≤–∫–∏ –≤—ñ–¥ {user.id}: {e}")
        if ADMIN_ID:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
            await bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞—è–≤–∫–∏ –≤—ñ–¥ {user.id}:\n{e}", parse_mode=None)
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu, parse_mode=None)
    
    finally:
        await state.finish()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook –¥–ª—è Flask ---

@app.route('/webhook', methods=["POST"])
def webhook_handler():
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        update = types.Update(**request.json)
        loop.run_until_complete(dp.process_update(update))
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        
    return "ok", 200

@app.route('/')
def health_check():
    return "‚úÖ Bot is alive and kicking!", 200

# –¶–µ–π –±–ª–æ–∫ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞ Render, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î WSGI —Å–µ—Ä–≤–µ—Ä (Gunicorn)
if __name__ == '__main__':
    pass
